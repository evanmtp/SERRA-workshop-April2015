<jittershader name="masker">
	<description>
	luminance threshold alpha generation
	</description>
	<param name="lum" type="float" default="0.">
		<description>luminance low hi thresholds</description>
	</param>

	<param name="range" type="float" default="0.1" />

	<param name="fade" type="float" default="0.05" />
	<param name="lumcoeff" type="vec4" default="0.299 .587 0.114 0.">
		<description>Luminance coefficients (RGBA)</description>
	</param>
	
	<param name="tex0" type="int" default="0" />
	<param name="tex1" type="int" default="1" />
	<language name="glsl" version="1.0">
		<bind param="lum" program="fp" />
		<bind param="range" program="fp" />
		<bind param="fade" program="fp" />
		<bind param="lumcoeff" program="fp" />
		<bind param="tex0" program="fp" />	
		<bind param="tex1" program="fp" />	
		<program name="vp" type="vertex" source="sh.passthru.xform.vp.glsl" />
		<program name="fp" type="fragment">
<![CDATA[

//setup for single texture
varying vec2 texcoord0;
varying vec2 texcoord1;
uniform sampler2DRect tex0;
uniform sampler2DRect tex1;

//luma threshold
uniform float lum;
uniform float range;
uniform float fade;
uniform vec4 lumcoeff;


void main()
{   

	vec4 a = texture2DRect(tex0, texcoord0);
	vec4 b = texture2DRect(tex1, texcoord1);

	// calculate our luminance
	float luminance = dot(b,lumcoeff);
	//float clo = step(lum-range,luminance); 
	//float chi = 1.-step(lum+range,luminance);
	float amask = abs(lum-luminance);
	amask = 1.-smoothstep(range,range+fade,amask);
	//float amask = float (clo * chi);
	//if (amask<1.) discard;

	// output texture with transparency 
	gl_FragColor = vec4(a.rgb,amask);
}
]]>
		</program>
	</language>
</jittershader>
